import pandas as pd
import plotly.graph_objs as go
from scipy import stats
import numpy as np

from textwrap import dedent as d
import sklearn.linear_model as skl_lm
from sklearn.metrics import mean_squared_error, r2_score


df2 = pd.read_csv('https://raw.githubusercontent.com/colaberry/DSin100days/master/data/Advertising.csv')

regr = skl_lm.LinearRegression()

X = df2[['Radio', 'TV']].as_matrix()
y = df2.Sales

regr.fit(X,y)
coef = regr.coef_
intercept = regr.intercept_

regr_model = regr
y_hat = regr.predict(X)
mse_ = mean_squared_error(y_hat,y)
print('mse is:', mse_)


def predict(tv, radio):
    data = pd.DataFrame({'TV': [tv], 'Radio': [radio]})
    return regr.predict(data)


styles = {
    'pre': {
        'border': 'thin lightgrey solid',
        'overflowX': 'scroll'
    }
}

def get_zvalue(radio_max,tv_max):
    
    #coef = np.array([ 0.18799423,0.04575482])
    #intercept = 2.92109991241
    # Create a coordinate grid
    radio_range = max(50,int(round(radio_max)))
    tv_range = max(300, int(round(tv_max)))
    
    Radio = np.arange(0,radio_range)
    TV = np.arange(0,tv_range)
    
    B1, B2 = np.meshgrid(Radio, TV, indexing='xy')
    Z = np.zeros((TV.size, Radio.size))

    # Here is the place where we tilt and elevate the hyperplane
    for (i,j),v in np.ndenumerate(Z):
            Z[i,j] =(intercept + B1[i,j]*coef[0] + B2[i,j]*coef[1])

    return Z



text_content = '''**About the Model & Algorithm**

              In this datadoc, we take a dataset of Advertising spends of various companies 
              on TV, Radio and Newspaper to predict the corresponding Sales generated by the Ad dollars.
              We use an sklearn LinearRegression based model to predict the Sales from TV and Radio Ad spends.
               
              Linear regression is a supervised learning algorithm. Given a single feature, a line is fit that 
              best predicts the independent variable. When many features are involved, a hyperplane is fit that 
              minimizes the error between predicted values and the ground truth. 
                
              Given an input vector Xn = (X1, X2, ..., Xn) that we want to use to predict the output y, 
              the regression equation is given by:

                   y=m*X + c

              The line that minimizes the Mean Squared Distance (MSE) is the best fit. 
              Linear Regression is a statistical technique to determine that line.
              In this case, the regression model is a hyperplane in a 3-dimensional space with Radio, 
              TV and the predicted sales being the axes.
                
            '''

def getData():
    trace0 = go.Scatter3d(
                    y=df2['TV'],
                    x=df2['Radio'],
                    z=df2['Sales'],
                    #text='' + df2['TV'],
                    mode='markers',
                    opacity=0.7,
                    marker={
                        'size': 15,
                        'line': {'width': 0.5, 'color': 'white'}
                    }
    )
    trace1 = go.Surface(z=get_zvalue(0,0), showscale=False, opacity=0.7)
    data = [trace0,trace1]
    return data

def getLayout():
    layout0 = go.Layout(
                    scene = dict(
                        xaxis = dict(
                            title='Radio Spend(x)'),
                        yaxis = dict(
                            title='TV Spend(y)'),
                        zaxis = dict(
                            title='Sales(z)')),
                margin={'l': 0, 'b': 0, 't': 0, 'r': 0},
                #legend={'x': 0, 'y': 1},
                hovermode='closest'
        )
    return layout0


import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output


layout = html.Div([
            html.Link(
                rel='stylesheet',
                href='/static/bWLwgP.css'
            ),
            
        html.H1(children='Predicting Sales using Regression'),

        html.Div(className='row', children=[
            html.Div([
                dcc.Markdown(d("""
                    **TV Spends**

                    Enter the amount (in $) spent on TV Ads.
                """)),
                dcc.Input(id='tv-id', value='230.10', type='text')
            ], className='three columns'),

            html.Div([
                dcc.Markdown(d("""
                    **Radio Spends**

                    Enter the amount (in $) spent on Radio Ads.
                """)),
                dcc.Input(id='radio-id', value='37.80', type='text'),
            ], className='three columns')
        ]),
                           
        html.Div(id='predicted-div'),

        html.Div(className='row', children=[
            html.Div([
            dcc.Graph(
            id='advert-graph',
            figure={
                'data': getData(),
                'layout': getLayout()
            }    
        )], style={'width': '60%', 'display': 'inline-block', 'padding': '0 20'}),

            
            html.Div([
                dcc.Markdown(d("""
                    #### Regression Constants

                    **Co-efficients**
                """)),
               html.Div('Radio : {}'.format(coef[0]), style={'color': 'blue', 'fontSize': 14}),
               html.Div('TV    : {}'.format(coef[1]), style={'color': 'blue', 'fontSize': 14}),
                dcc.Markdown(d("""
                    **Intercept**
                """)),
               html.Div(intercept, style={'color': 'blue', 'fontSize': 14}),
                dcc.Markdown(d("""
                    **Mean Squared Error**
                """)),
              html.Div(mse_, style={'color': 'blue', 'fontSize': 14}),

            ], style={'width': '40%', 'display': 'inline-block'})]),
        html.Div([
                dcc.Markdown(d(text_content)),
            ], style={'width': '50%', 'display': 'inline-block'})


        ])